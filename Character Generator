___Author___
___JoshuaCowan__

import random
# Credit to cruces13(git) who I saw post a similar generator on reddit
# I incorporated some of his class and structure ideas
# Input Values
Races = ['Human', 'Half-Elf', 'Elf', 'Dwarf', 'Half-Orc', 'Halfing', 'Tiefling'
         , 'Dragonborn', 'Gnome']
Classes = ['Barbarian', 'Bard', 'Cleric', 'Druid', 'Fighter', 'Monk', 'Paladin'
           , 'Ranger', 'Rogue', 'Sorcerer', 'Warlock', 'Wizard']

Backgrounds = ['Acolyte', 'Charlatan', 'Criminal', 'Entertainer', 'Folk Hero',
               'Guild Artisan', 'Hermit', 'Noble', 'Outlander', 'Sage',
               'Sailor', 'Soldier', 'Urchin']
Alignments = ['Lawful Good', 'Neutral Good', 'Chaotic Good', 'Lawful Neutral',
              'True Neutral', 'Chaotic Neutral', 'Lawful Evil', 'Chaotic Evil']

Selected_Race = random.choice(Races)
Selected_Class = random.choice(Classes)
Selected_Background = random.choice(Backgrounds)
Selected_Alignment = random.choice(Alignments)

# This will generate a statistic for every single stat
st_score = str(random.randint(3, 18))
dex_score = str(random.randint(3, 18))
con_score = str(random.randint(3, 18))
int_score = str(random.randint(3, 18))
wis_score = str(random.randint(3, 18))
cha_score = str(random.randint(3, 18))

# skill_score = ['1','2','3','4','5','6','7','8','9','10','11','12','13',
# '14','15','16','17','18','19','20','21','22','23','24','25','26','27',
# '28','29','30'] skill_modifier = ['-5','-4','-4','-3','-3','-2','-2','-1',
# '-1','0','0','+1','+1','+1','+2','+2','+3','+3','+4','+4','+4','+5','+5',
# '+6','+6','+7','+7','+8','+8','+9','+10']

# So all of these correspond to what ability score you will have based on the
# Stat. For example: 1 strength would mean every normal strength check would
# have -5 to the roll. This class tells the whole program this for modifiers
Ability_Score_Modifiers = {'1': '-5', '2': '-4', '3': '-4', '4': '-3',
                           '5': '-3', '6': '-2', '7': '-2', '8': '-1',
                           '9': '-1', '10': '0', '11': '0', '12': '+1',
                           '13': '+1', '14': '+2', '15': '+2', '16': '+3',
                           '17': '+3', '18': '+4', '19': '+4', '20': '+5',
                           '21': '+5', '22': '+6', '23': '+6', '24': '+7',
                           '25': '+7', '26': '+8', '27': '+8', '28': '+9',
                           '29': '+9', '30': '+10'}


# Print random race
def race_generator():
    print(Selected_Race)


# Print random class from list
def class_generator():
    print(Selected_Class)


# Print random background
def background_generator():
    print(Selected_Background)

# Print Random Alignment
def alignment_generator():
    print(Selected_Alignment)


# Random Number Generator for Stats (6 values from 3-18)
def stat_generator():
    print('-------Ability Scores-------')
    # Strength Score
    print(st_score)

    # Race Bonuses
    # The stat line checks for each race, and if they do not have it, then
    # The program selects the default score for the attribute it is on
    if Selected_Race == 'Human':
        st_bonus = str(1)
        strength = str(int(st_score) + int(st_bonus))
    elif Selected_Race == 'Dragonborn':
        st_bonus = str(2)
        strength = str(int(st_score) + int(st_bonus))
    elif Selected_Race == 'Half-Orc':
        st_bonus = str(2)
        strength = str(int(st_score) + int(st_bonus))
    else:
        strength = st_score
        # Modifier Code
        # This line pulls the values and their corresponding modifiers
        # In order to put it neatly into the formatting
    for key in Ability_Score_Modifiers:
        if key == strength:
            print("Strength\nScore of {}\nGrants a modifier of {}"
                  .format(strength, Ability_Score_Modifiers[strength]))
        else:
            pass
    print('------------------------------------------')

    # Dexterity Score
    print(dex_score)

    # Race Bonuses
    if Selected_Race == 'Human':
        dex_bonus = str(1)
        dexterity = str(int(dex_score) + int(dex_bonus))
    elif Selected_Race == 'Elf':
        dex_bonus = str(2)
        dexterity = str(int(dex_score) + int(dex_bonus))
    elif Selected_Race == 'Halfling':
        dex_bonus = str(2)
        dexterity = str(int(dex_score) + int(dex_bonus))
    elif Selected_Race == 'Half-Elf':
        dex_bonus = str(1)
        dexterity = str(int(dex_score) + int(dex_bonus))
    else:
        dexterity = dex_score
        # Modifier Code
    for key in Ability_Score_Modifiers:
        if key == dexterity:
            print("Dexterity\nScore of {}\nGrants a modifier of {}"
                  .format(dexterity, Ability_Score_Modifiers[dexterity]))
        else:
            pass
    print('------------------------------------------')

    # Constitution Score
    print(con_score)

    if Selected_Race == 'Human':
        con_bonus = str(1)
        constitution = str(int(con_score) + int(con_bonus))
    elif Selected_Race == 'Dwarf':
        con_bonus = str(2)
        constitution = str(int(con_score) + int(con_bonus))
    elif Selected_Race == 'Half-Orc':
        con_bonus = str(1)
        constitution = str(int(con_score) + int(con_bonus))
    else:
        constitution = con_score
        # Modifier Code
    for key in Ability_Score_Modifiers:
        if key == constitution:
            print("Constitution\nScore of {}\nGrants a modifier of {}"
                  .format(constitution,
                          Ability_Score_Modifiers[constitution]))
        else:
            pass
    print('------------------------------------------')

    # Intelligence Score

    print(int_score)
    if Selected_Race == 'Human':
        int_bonus = str(1)
        intelligence = str(int(int_score) + int(int_bonus))
    elif Selected_Race == 'Gnome':
        int_bonus = str(2)
        intelligence = str(int(int_score) + int(int_bonus))
    elif Selected_Race == 'Tiefling':
        int_bonus = str(1)
        intelligence = str(int(int_score) + int(int_bonus))
    else:
        intelligence = int_score
        # Modifier Code
    for key in Ability_Score_Modifiers:
        if key == intelligence:
            print("Intelligence\nScore of {}\nGrants a modifier of {}"
                  .format(intelligence,
                          Ability_Score_Modifiers[intelligence]))
        else:
            pass
    print('------------------------------------------')

    # Wisdom Score

    print(wis_score)
    if Selected_Race == 'Human':
        wis_bonus = str(1)
        wisdom = str(int(wis_score) + int(wis_bonus))
    elif Selected_Race == 'Half-Elf':
        wis_bonus = str(1)
        wisdom = str(int(wis_score) + int(wis_bonus))
    else:
        wisdom = wis_score
        # Modifier Code
    for key in Ability_Score_Modifiers:
        if key == wisdom:
            print("Wisdom\nScore of {}\nGrants a modifier of {}"
                  .format(wisdom, Ability_Score_Modifiers[wisdom]))
        else:
            pass
    print('------------------------------------------')

    # Charisma Score
    print(cha_score)
    if Selected_Race == 'Human':
        cha_bonus = str(1)
        charisma = str(int(cha_score) + int(cha_bonus))
    elif Selected_Race == 'Half-Elf':
        cha_bonus = str(2)
        charisma = str(int(cha_score) + int(cha_bonus))
    elif Selected_Race == 'Tiefling':
        cha_bonus = str(2)
        charisma = str(int(cha_score) + int(cha_bonus))
    elif Selected_Race == 'Dragonborn':
        cha_bonus = str(1)
        charisma = str(int(cha_score) + int(cha_bonus))
    else:
        charisma = cha_score
        # Modifier Code
    for key in Ability_Score_Modifiers:
        if key == charisma:
            print("Charisma\nScore of {}\nGrants a modifier of {}"
                  .format(charisma, Ability_Score_Modifiers[charisma]))
        else:
            pass
    print('------------------------------------------')


def main():
    race_generator()
    class_generator()
    background_generator()
    alignment_generator()
    stat_generator()


main()
